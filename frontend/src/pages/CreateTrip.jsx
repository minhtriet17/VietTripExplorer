import PlacesAutocomplete from '@/components/shared/PlacesAutocomplete'
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { AI_PROMPT, SelectBudgetOptions, SelectTravelesList } from '@/constants/options';
import { chatSession } from '@/service/AIModal';
import React, { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom';
import { toast } from 'sonner';
import { useSelector } from "react-redux";

const CreateTrip = () => {

    const [place, setPlace] = useState();
    const [formData, setFormData] = useState({});
    const [loading, setLoading] = useState(false);

    const navigate = useNavigate();

    const { currentUser } = useSelector((state) => state.user);

    const handleInputChange = (name, value) => {
        setFormData({
            ...formData,
            [name]: value
        })
      };

      useEffect(() => {
        console.log(formData)
      }, [formData])

      const handlePlaceSelected = (address) => {
        console.log(address); // In ra ƒë·ªãa ch·ªâ khi ng∆∞·ªùi d√πng ch·ªçn
        setPlace(address);    // C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ khi ch·ªçn
        handleInputChange('location', address); // C·∫≠p nh·∫≠t gi√° tr·ªã v√†o formData
      };

    const OnGenerateTrip= async () => {

        if (!currentUser || !currentUser._id) {
            toast.error("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ t·∫°o l·ªãch tr√¨nh!");
            navigate("/sign-in");
            return;
        }

        if (
            !formData?.location ||
            !formData?.noOfDays ||
            !formData?.budget ||
            !formData?.traveler
          )
        { 
            toast("H√£y nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªÉ t·∫°o l·ªãch tr√¨nh!")
            return
        }

        setLoading(true); // B·∫Øt ƒë·∫ßu loading khi nh·∫•n n√∫t

        const FINAL_PROMPT = AI_PROMPT
            .replace('{location}', formData?.location?.displayName)
            .replace('{totalDays}', formData?.noOfDays)
            .replace('{traveler}', formData?.traveler)
            .replace('{budget}', formData?.budget)
            .replace('{totalDays}', formData?.noOfDays)

            console.log(FINAL_PROMPT)


            try {
                const result = await chatSession.sendMessage(FINAL_PROMPT)

                const response = await result?.response?.text();

                console.log("--", response)

                let parsedAiItinerary;

                try {
                    parsedAiItinerary = JSON.parse(response);
                  } catch (error) {
                    console.error("Kh√¥ng th·ªÉ parse JSON t·ª´ AI:", error);
                    toast.error("D·ªØ li·ªáu AI tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá.");
                    return;
                  }

                const tripDataToSave = {
                    ...formData,
                    aiItinerary: parsedAiItinerary, 
                };

                console.log(typeof response);           // string
                console.log(typeof parsedAiItinerary);  // object

                const res = await fetch('/api/trip/create', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  credentials: 'include', // B·∫ÆT BU·ªòC ƒë·ªÉ g·ª≠i cookie
                  body: JSON.stringify(tripDataToSave)
                });

                if (res.status === 401) {
                    toast.error("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ t·∫°o l·ªãch tr√¨nh!");
                    navigate("/sign-in");
                    return;
                }

                const data = await res.json();
              
                if (res.ok) {
                  toast.success("L·ªãch tr√¨nh ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!");

                  navigate(`/view-trip/${data.slug}`)
                } else {
                  toast.error("C√≥ l·ªói x·∫£y ra khi l∆∞u l·ªãch tr√¨nh!");
                }
            } catch (err) {
                console.error(err);
                toast.error("L·ªói k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß!");
            } finally {
                setLoading(false);  // K·∫øt th√∫c loading d√π k·∫øt qu·∫£ c√≥ th√†nh c√¥ng hay kh√¥ng
            }
    }


    
  return (
    <div className='sm:px-10 md:px-32 lg:px-56 xl:px-10 px-5 mt-10'>
        <h2 className='font-bold text-3xl text-center mb-10'>
            H√£y cho ch√∫ng t√¥i bi·∫øt s·ªü th√≠ch du l·ªãch c·ªßa b·∫°n üèïÔ∏èüå¥
        </h2>

        <p className="mt-3 text-lg text-center text-slate-500">
            Ch·ªâ c·∫ßn cung c·∫•p cho ch√∫ng t√¥i m·ªôt s·ªë th√¥ng tin c∆° b·∫£n v·ªÅ chuy·∫øn ƒëi c·ªßa b·∫°n v√† ch√∫ng t√¥i s·∫Ω t·∫°o ra m·ªôt h√†nh tr√¨nh ph√π h·ª£p d√†nh ri√™ng cho b·∫°n.
        </p>

        <div className="mt-20">
            <div className="">
                <h2 className="text-xl font-medium my-3">
                    ƒêi·ªÉm ƒë·∫øn c·ªßa chuy·∫øn ƒëi c·ªßa b·∫°n ·ªü ƒë√¢u?
                </h2>

                <PlacesAutocomplete
                    value={place}
                    onChange={(v) => { 
                        setPlace(v); 
                        handleInputChange('location', v);
                    }}
                    onPlaceSelected={handlePlaceSelected}  // H√†m x·ª≠ l√Ω khi ch·ªçn ƒë·ªãa ƒëi·ªÉm
                 />
            </div>

            <div className="mt-10">
                <h2 className="text-xl my3 font-medium">
                    B·∫°n s·∫Ω ·ªü l·∫°i bao l√¢u?
                </h2>
                <Input placeholder={'Ex.3'} type="number"
                    onChange={(e) => handleInputChange('noOfDays', e.target.value)}
                />
            </div>
        </div>

        <div className='mt-10'>
            <h2 className='text-xl my-3 font-medium'>
                Chi ti√™u c·ªßa b·∫°n cho chuy·∫øn ƒëi n√†y l√† bao nhi√™u
            </h2>

            <div className='grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-5'>
                {SelectBudgetOptions.map((item, index) => (
                    <div key={index}
                        onClick={() => handleInputChange('budget', item.title)}
                        className={`p-4 border rounded-lg hover:shadow-lg
                        cursor-pointer flex flex-col items-center justify-center
                        ${formData.budget === item.title ? 'bg-blue-100 border-black shadow-lg' : ''}`}>
                        <h2 className='text-4xl'>{item.icon}</h2>
                        <h2 className='font-bold text-lg'>{item.title}</h2>
                        <h2 className='text-sm text-gray-500'>{item.desc}</h2>
                    </div>
                ))}
            </div>
        </div>

        <div className='mt-10'>
            <h2 className='text-xl my-3 font-medium'>
                B·∫°n ƒëi du l·ªãch c√πng v·ªõi ai?
            </h2>

            <div className='grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-5'>
                {SelectTravelesList.map((item, index) => (
                    <div key={index} 
                        onClick={() => handleInputChange('traveler', item.people)}
                        className={`p-4 border rounded-lg hover:shadow-lg
                            cursor-pointer flex flex-col items-center justify-center
                            ${formData.traveler === item.people ? 'bg-blue-100 border-black shadow-lg' : ''}`}>
                        <h2 className='text-4xl'>{item.icon}</h2>
                        <h2 className='font-bold text-lg'>{item.title}</h2>
                        <h2 className='text-sm text-gray-500'>{item.desc}</h2>
                    </div>
                ))}
            </div>
        </div>

        <div className='my-10 flex items-center justify-end'>
                <Button onClick={OnGenerateTrip} type="submit" className="cursor-pointer" disabled={loading}>
                    {loading ? (
                        <div className="w-5 h-5 border-4 border-t-transparent border-blue-400 border-solid rounded-full animate-spin"></div>
                    ) : (
                        'T·∫°o l·ªãch tr√¨nh'
                    )}
                </Button>
            </div>
        
    </div>
  )
}

export default CreateTrip